/*
  ESP8266 Blink by Simon Peter
  Blink the blue LED on the ESP-01 module
  This example code is in the public domain

  The blue LED on the ESP-01 module is connected to GPIO1
  (which is also the TXD pin; so we cannot use Serial.print() at the same time)

  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED
*/
#include <ArduinoJson.h>
void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(115200);
  while (!Serial) continue;
  digitalWrite(LED_BUILTIN, HIGH); // Initialize the LED_BUILTIN pin as an output
}

void loop() {


/*
  DynamicJsonDocument doc(1024);

  doc["sensor"] = "gps";
  doc["time"]   = 1351824120;
  doc["data"][0] = 48.756080;
  doc["data"][1] = 2.302038;

  serializeJson(doc, Serial);
 */

  if (Serial.available())
  {
    digitalWrite(LED_BUILTIN, LOW);
    // Allocate the JSON document
    // This one must be bigger than the sender's because it must store the strings
    String command = Serial.readString();
    StaticJsonDocument<500> doc;
    int str_len = command.length() + 3;
    char char_array[str_len];
    command.toCharArray(char_array, str_len);

      DeserializationError error = deserializeJson(doc, char_array);

    // Read the JSON document from the "link" serial port
   // DeserializationError err = deserializeJson(doc, Serial);

    if (error) {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        return;
      }
    else
    {
        DynamicJsonDocument doc2(1024);
        doc2["R"] = doc["A"];
        serializeJson(doc2, Serial);
        Serial.println();
    }
    digitalWrite(LED_BUILTIN, HIGH);


  }
                      // Wait for two seconds (to demonstrate the active low LED)
}

// the loop function runs over and over again forever
void loop1() {

  Serial.begin(115200);
  while (!Serial) continue;

                     // Wait for two seconds (to demonstrate the active low LED)
   DynamicJsonDocument doc(1024);

  doc["sensor"] = "gps";
  doc["time"]   = 1351824120;
  doc["data"][0] = 48.756080;
  doc["data"][1] = 2.302038;
  while(1) {
  serializeJson(doc, Serial);
  delay(1000);
  }


   if (Serial.available())
  {

    // Allocate the JSON document
    // This one must be bigger than the sender's because it must store the strings
    StaticJsonDocument<300> doc;

    // Read the JSON document from the "link" serial port
    DeserializationError err = deserializeJson(doc, Serial);

    if (err == DeserializationError::Ok)
    {

    }
    else
    {
      digitalWrite(LED_BUILTIN, LOW);
        Serial.println("test");
        DynamicJsonDocument doc(1024);
        doc["R"] = doc["A"];
        serializeJson(doc, Serial);
        digitalWrite(LED_BUILTIN, HIGH);
    }


  }

}
